package starcraftbot.proxybot;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Robot;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;

import starcraftbot.abl.Logger;
import starcraftbot.abl.StarCraftConstants;
import starcraftbot.proxybot.Constants.Race;
import starcraftbot.proxybot.bot.ABLStarCraftBot;
import starcraftbot.proxybot.bot.StarCraftBot;
import starcraftbot.proxybot.gui.ABLPanel;
import starcraftbot.proxybot.gui.CommandLogPanel;
import starcraftbot.proxybot.gui.LoggingPanel;
import starcraftbot.proxybot.gui.SpeedPanel;
import starcraftbot.proxybot.gui.StarCraftFrame;
import starcraftbot.proxybot.gui.WMEPanel;
import starcraftbot.proxybot.wmes.unit.PlayerUnitWME;
import de.javasoft.plaf.synthetica.SyntheticaBlueMoonLookAndFeel;
/**
 * ProxyBot.
 * 
 * Manages socket connections with StarCraft and handles the
 * agent <-> StarCraft communication.
 * 
 * TODO: need a way of detecting stalemates for auto-restart
 * 
 * System arguments:
 *  -DSpeedUp=true 			runs the game at fastest speed possible
 *  -DShowProxyBotGUI=true 	brings up the debug GUI
 *  -DAutoRestart=true 		restarts the game automatically
 *  -DRace1=Terran
 *  -DRace2=Protoss
 *  -DIccupMode=false
 *  
 * JVM Arguments:
 *  -Xmx1024M recommended 
 *  
 * Recommended Debug mode:
 *  -DSpeedUp=true
 *  -DShowProxyBotGUI=true
 *  -DAutoRestart=false
 *  
 * Recommended Testing mode:
 *  -DSpeedUp=true
 *  -DShowProxyBotGUI=false
 *  -DAutoRestart=true 
 *  -DIccupMode=false
 */
public class ProxyBot {

	/** port to start the server socket on */
	public static int port = 12345;
	
	/** allow the user to control units */
	public static boolean allowUserControl = true;
	
	/** turn on complete information (TODO: figure out FoW issues) */
	// TODO: Fix no-minerals glitch (reproducable on BlueStorm) (race condition?)
	public static boolean completeInformation = true;

	/** display agent commands in SC? */
	public static boolean logCommands = false;

	/** auto zoom to locations? */
	public static boolean commentaryMode = Boolean.getBoolean("CommentaryMode");
	
	/** display agent commands in SC? */
	public static boolean terrainAnalysis = true;

	public static boolean speedUp = Boolean.getBoolean("SpeedUp");
 
	/** display the GUI? */
	public static boolean showGUI = Boolean.getBoolean("ShowProxyBotGUI");
	
	public static boolean autoRestart = Boolean.getBoolean("AutoRestart");
	public static boolean ICCupMode = Boolean.getBoolean("IccupMode");
	public static Race race1 = Race.Terran;
	public static Race race2 = Race.Protoss;
	private int gameCount = 0;
	private int winCount = 0;
	private boolean gameIsRunning = false;
	
	public static void main(String[] args) {		

		// pretty GUIs
		try {
			UIManager.setLookAndFeel(new SyntheticaBlueMoonLookAndFeel());
		}
		catch (Exception e) {}

		// load races from System properties
		try {
			race1 = Race.valueOf(System.getProperty("Race1"));
		}
		catch (Exception e) {}
		try {
			race2 = Race.valueOf(System.getProperty("Race2"));
		}
		catch (Exception e) {}

		
		new ProxyBot().start();
	}

	/**
	 * Starts the ProxyBot.
	 * 
	 * A server socket is opened and waits for client connections.
	 */
	public void start() { 
		try {			
		    ServerSocket serverSocket = new ServerSocket(port);
		    
		    while (true) {
			    Logger.print("ProxyBot", "Waiting for client connection");

				// select the races from the custom game screen
				if (gameCount ==0 && autoRestart || ICCupMode) {
					new Thread() {
						public void run() {
							if (ICCupMode) {
								iccup(false);
							}
							else {
								restart(false);
							}
						}
					}.start();
				}
			    
			    Socket clientSocket = serverSocket.accept();			
			    
			    Logger.print("ProxyBot", "Client connected");		    
			    runGame(clientSocket);
		    }
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}	

//	robot.mouseMove(560, 394);
//	robot.mousePress(InputEvent.BUTTON1_MASK);
//	robot.mouseRelease(InputEvent.BUTTON1_MASK);

	
	/**
	 * Manages communication with StarCraft.
	 */
	private void runGame(Socket socket) {		
		Robot robot = null;
		try {
			robot = new Robot();	    			
		}
		catch (Exception e) {}
		
		WMEPanel wmePanel = null;
		StarCraftFrame frame = null;
    	SpeedPanel speedPanel = null;
		final StarCraftBot bot = new ABLStarCraftBot();
		Game gameRef = null;
		
		JFrame mainFrame = new JFrame("Proxy Bot");
		JTabbedPane mainPanel = new JTabbedPane();
		mainPanel.setPreferredSize(new Dimension(600, 500));
		mainFrame.add(mainPanel);

		boolean saidHello = false;
		int framesToQuit = 0;
				
		try {
			// 1. get the initial game information
		    BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    	String playerData = reader.readLine();
	
	    	// 2. respond with bot options
	    	Logger.print("ProxyBot", "Sending bot options");
	    	String botOptions = (allowUserControl ? "1" : "0") 
	    					  + (completeInformation ? "1" : "0")
	    					  + (logCommands ? "1" : "0")
      					      + (terrainAnalysis ? "1" : "0")
	    					  + (commentaryMode ? "1" : "0");
	    		    	
	    	socket.getOutputStream().write(botOptions.getBytes());
			
	    	// 3. get the starting locations and map information
	    	String locationData = reader.readLine();
	    	String mapData = reader.readLine();
	    	
	    	// TA
	    	String regionsData = "Regions:";
	    	String chokesData = "Chokes:";
	    	String basesData = "Bases:";
	    	
	    	if (terrainAnalysis) {
	    		regionsData = reader.readLine();
	    		chokesData = reader.readLine();
	    		basesData = reader.readLine();
	    	}

	    	Logger.print("ProxyBot", "Game starting");
	    	final Game game = new Game(playerData, locationData, mapData, chokesData, basesData, regionsData);
	    	gameRef = game;
	    	boolean firstFrame = true;

	    	// show the game speed panel
			if (showGUI) {
	    		JPanel flowPanel = new JPanel();
	    		JPanel panel = new JPanel();	    		
	    		
	    		panel.setLayout(new BorderLayout());
	    		speedPanel = new SpeedPanel(game);
	    		panel.add(speedPanel, BorderLayout.NORTH);
	    			    		
	    		ABLPanel ablPanel = new ABLPanel();
	    		ABLStarCraftBot.getBehavingEntity().addBehavingListener(ablPanel);
	    		
	    		wmePanel = new WMEPanel();
	    		panel.add(wmePanel, BorderLayout.WEST);
	    		panel.add(ablPanel, BorderLayout.SOUTH);
	    		panel.setBorder(BorderFactory.createTitledBorder("ABL"));
	    		
	    		CommandLogPanel logPanel = new CommandLogPanel();
	    		game.getCommandQueue().addCommandListener(logPanel);
	    		logPanel.setBorder(BorderFactory.createTitledBorder("Commands Issued"));
	    		
	    		flowPanel.setLayout(new BorderLayout());
	    		flowPanel.add(panel, BorderLayout.WEST);
	    		flowPanel.add(logPanel, BorderLayout.CENTER);
	    	    		
	    		mainPanel.addTab("Controls", flowPanel);	    		
	    		mainFrame.pack(); 
	    		mainFrame.setVisible(true);
	    		
	    		// logging panel
	    		LoggingPanel loggingPanel = new LoggingPanel();
	    		Logger.addListener(loggingPanel);
	    		mainPanel.addTab("Logging", loggingPanel);	    			    		

//	    		JPanel loggingHolder = new JPanel();	    		
//	    		loggingHolder.setLayout(new BorderLayout());
//	    		loggingHolder.add(loggingPanel, BorderLayout.WEST);	    		
//	    		mainPanel.addTab("Logging", loggingHolder);	    			    		
	    	}
	    	else if (speedUp) {
	    		game.getCommandQueue().setGameSpeed(0);
	    	}
			
	    	boolean won = false;
	    	
	    	// 4. game updates
	    	while (true) {
	    		
	    		String update = reader.readLine();
	    		if (update.startsWith("ended")) {
	    			won = update.endsWith("1");
	    			break;
	    		}
	    		else if (update == null) {
	    			break;
	    		}
	    		else {	    				    			
	    			// update the game
	    			game.update(update);	    			

	    			if (firstFrame) {	    				
	    				firstFrame = false;
	    				
	    				// Close crashed games
	    				gameIsRunning = true;
	    				if (ICCupMode) {
		    				new Thread() {
		    					public void run() {
		    						Robot robot = null;
		    						try {
		    							robot = new Robot();	    			
		    						}
		    						catch (Exception e) {}
		    						
		    						while (gameIsRunning) {
			    						try {
			    							Thread.sleep(5000);
			    							robot.mouseMove(560, 394);
			    							robot.mousePress(InputEvent.BUTTON1_MASK);
			    							robot.mouseRelease(InputEvent.BUTTON1_MASK);
			    						}
			    						catch (Exception e) {}
		    						}
		    					}
		    				}.start();
	    				}
	    				
	    				// start the agent
	    				new Thread() {
	    					public void run() {
	    	    				bot.start(game);
	    					}
	    				}.start();
	    				
	    				// initialize the GUI
	    				if (showGUI) {
	    					
		    				JPanel agentPanel = bot.getPanel();
		    				if (agentPanel != null) {
		    					mainPanel.addTab("ABL Tree", agentPanel);
		    				}

	    					frame = new StarCraftFrame(game);
		    				game.getCommandQueue().addCommandListener(frame);
		    				
		    				JPanel panel = new JPanel();
		    				panel.setLayout(new BorderLayout());
		    				panel.add(frame, BorderLayout.CENTER);
		    				panel.add(frame.getLayerPanel(), BorderLayout.SOUTH);		    				
		    	    		mainPanel.addTab("Game View", panel);
		    			}
	    			}

	    			// 5. send commands
	    	    	socket.getOutputStream().write(game.getCommandQueue().getCommands().getBytes());
	    	    	
	    	    	// try closing the game (e.g. started with no opponent)
	    	    	if (ICCupMode && game.getGameFrame()%240 == 120) {
	    	        	robot.keyPress(KeyEvent.VK_ENTER);
	    	        	robot.keyRelease(KeyEvent.VK_ENTER);	    	  	    	        	
	    	    	}	    	    	
	    	    	
	    	    	// do stuff on ICCup
	    	    	if (ICCupMode) {

	    	    		// say hello
	    	    		if (game.getGameFrame() > 24 * 15 && !saidHello) {
	    	    			game.getCommandQueue().sayHello();	    	    		
	    	    			saidHello = true;
	    	    		}
	    	    		
		    	    	// leave the game if losing
	    	    		if (framesToQuit > 0) {
	    	    			framesToQuit++;
	    	    			
	    	    			if (framesToQuit > 24*15) {
	    	    				game.getCommandQueue().leaveGame();
	    	    			}
	    	    		}	    	    			
	    	    		// say GG
	    	    		else if (game.getGameFrame() > 100) {
		    	    		int ccHealth = 0;
		    	    		int workerCount = 0;
		    	    		
		    	    		for (PlayerUnitWME unit : game.getPlayerUnits()) {
		    	    			if (unit.getTypeID() == StarCraftConstants.Terran_Command_Center) {
		    	    				ccHealth = unit.getHitPoints();
		    	    			}
		    	    			else if (unit.getTypeID() == StarCraftConstants.Terran_SCV) {
		    	    				workerCount++;
		    	    			}
		    	    		}

		    	    		if (ccHealth < 500 || workerCount < 4) {
		    	    			game.getCommandQueue().sayGG();	    	    		
		    	    			framesToQuit++;
		    	    		}
		    	    	}
	    			}
	    		}
	    	}
	    	
	    	// wait for game to terminate
	    	gameCount++;
	    	if (won) winCount++;
	    	Logger.print("ProxyBot", "Game Ended: " + winCount + "/" + gameCount);
	    	
		}
		catch (SocketException e) {
			Logger.print("ProxyBot", "StarCraft has disconnected");
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			gameIsRunning = false;
			
			// stop update thread 
			gameRef.stop();
			
			// stop the bot
			if (bot != null) {
				bot.stop();
			}
			
			if (frame != null) {
				frame.stop();
			}

			if (wmePanel != null) {
				wmePanel.stop();
			}

			// close the frame
			if (mainFrame != null) {
				mainFrame.setVisible(false);
			}
		}
		
		if (autoRestart) {
			restart(true);
		}
		else if (ICCupMode) {
			iccup(true);
		}
	}

	public void iccup(boolean restartingGame) {
		try {
			Robot robot = new Robot();	    			

			if (restartingGame) {
	        	System.out.println("Closing SC");
	        	Thread.sleep(1000);		        	

	    		new Thread() {
	    			public void run() {
	    	    		try {
	    		        	Thread.sleep(10000);		        	
	    		    		Runtime rt = Runtime.getRuntime();
	    		    		String[] killWPargs = {"TASKKILL", "/IM", "StarCraft.exe"};
	    		    		// if you need TASKKILL get it here, http://bit.ly/taskkill-for-xp-home

	    		    		Process kill = rt.exec(killWPargs);
	    		    		kill.waitFor();
	    		    		System.out.println("Process exit code: " + kill.exitValue());
	    		    		}
	    		    		catch (Exception e) {
	    		    			e.printStackTrace();
	    		    		 }
	    			}
	    		}.start();

	        	Thread.sleep(2000);
	        	robot.keyPress(KeyEvent.VK_ENTER);
	        	Thread.sleep(100);
	        	robot.keyRelease(KeyEvent.VK_ENTER);
	    		
	        	Thread.sleep(20000);
//				robot.mouseMove(690, 690);
//				robot.mousePress(InputEvent.BUTTON1_MASK);
//	        	Thread.sleep(100);
//				robot.mouseRelease(InputEvent.BUTTON1_MASK);
//	        	Thread.sleep(100);
	    		
	        	System.out.println("Aborting");
	        	Thread.sleep(10000);		        
	        	
				BufferedWriter writer = new BufferedWriter(new FileWriter("iccup.txt", true));
				writer.write("ICCup Game Ended(" + race1 + ", " + race2 + "): " + winCount + "/" + gameCount);
				writer.write("\n");
				writer.close();
	        	return;
			}

        	Thread.sleep(5000);		        	
        	System.out.println("Starting SC");
			robot.mouseMove(50, 365);
        	Thread.sleep(100);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(100);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);

        	// get onto ICCup
        	Thread.sleep(5000);
        	robot.keyPress(KeyEvent.VK_M);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_M);

        	Thread.sleep(2000);
        	robot.keyPress(KeyEvent.VK_E);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_E);

        	Thread.sleep(2000);
        	robot.keyPress(KeyEvent.VK_ENTER);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_ENTER);

        	Thread.sleep(15000);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_T);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_T);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_R);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_R);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_A);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_A);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_N);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_N);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_S);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_S);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_W);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_W);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_A);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_A);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_Y);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_Y);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_ENTER);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_ENTER);

        	Thread.sleep(5000);
			robot.mouseMove(50, 310);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(100);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_TAB);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_TAB);
        	
        	Thread.sleep(5000);
//        	robot.keyPress(KeyEvent.VK_E);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_E);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_I);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_I);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_S);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_S);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_B);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_B);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_O);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_O);
//        	Thread.sleep(100);
//        	robot.keyPress(KeyEvent.VK_T);
//        	Thread.sleep(100);
//        	robot.keyRelease(KeyEvent.VK_T);
        	Thread.sleep(100);
        	robot.keyPress(KeyEvent.VK_ENTER);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_ENTER);

        	long startTime = System.currentTimeMillis();

        	// close slots
        	Thread.sleep(5000);
			robot.mouseMove(100, 105);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(500);
			robot.mouseMove(100, 135);
        	Thread.sleep(500);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
        	Thread.sleep(500);
        	robot.keyPress(KeyEvent.VK_O);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_O);

        	Thread.sleep(500);
			robot.mouseMove(100, 125);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(500);
			robot.mouseMove(100, 155);
        	Thread.sleep(500);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
        	Thread.sleep(500);
        	robot.keyPress(KeyEvent.VK_O);
        	Thread.sleep(100);
        	robot.keyRelease(KeyEvent.VK_O);
			
        	while (true) {
            	Thread.sleep(1000);
            	robot.keyPress(KeyEvent.VK_O);
            	Thread.sleep(100);
            	robot.keyRelease(KeyEvent.VK_O);
            	Thread.sleep(100);
        		
        		int p1 = robot.getPixelColor(300, 79).getRGB();
        		int p2 = robot.getPixelColor(300, 80).getRGB();
        		int p3 = robot.getPixelColor(300, 81).getRGB();
        		int p4 = robot.getPixelColor(300, 82).getRGB();
        		int p5 = robot.getPixelColor(300, 83).getRGB();

        		if (p1 == -9699328 || p2 == -9699328 || p3 == -9699328 || p4 == -9699328 || p5 == -9699328) {        			
                	Thread.sleep(5000);
            		p1 = robot.getPixelColor(300, 79).getRGB();
            		p2 = robot.getPixelColor(300, 80).getRGB();
            		p3 = robot.getPixelColor(300, 81).getRGB();
            		
            		p4 = robot.getPixelColor(300, 82).getRGB();
            		p5 = robot.getPixelColor(300, 83).getRGB();

            		if (p1 == -9699328 || p2 == -9699328 || p3 == -9699328 || p4 == -9699328 || p5 == -9699328) {      			
            			break;
            		}
        		}
        		
        		if ((System.currentTimeMillis() - startTime) > 60000) {
                	Thread.sleep(1000);
                	robot.keyPress(KeyEvent.VK_ESCAPE);
                	Thread.sleep(100);
                	robot.keyRelease(KeyEvent.VK_ESCAPE);
                	
                	Thread.sleep(5000);
        			robot.mouseMove(50, 310);
        			robot.mousePress(InputEvent.BUTTON1_MASK);
                	Thread.sleep(100);
        			robot.mouseRelease(InputEvent.BUTTON1_MASK);
        			
                	Thread.sleep(5000);
                	robot.keyPress(KeyEvent.VK_ENTER);
                	Thread.sleep(100);
                	robot.keyRelease(KeyEvent.VK_ENTER);
                	
                	Thread.sleep(1000);
        			startTime = System.currentTimeMillis();
        		}
        	}

        	// select terran
        	Thread.sleep(1000);
			robot.mouseMove(250, 70);
        	Thread.sleep(1000);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(1000);
			robot.mouseMove(250, 100);
        	Thread.sleep(1000);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
        	
        	// start the game
	       	Thread.sleep(1000);
			robot.mouseMove(510, 420);
        	Thread.sleep(100);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(100);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
		}
		catch (Exception e) {
			e.printStackTrace();
		}		
	}

	
	public void restart(boolean restartingGame) {
		
		try {
			Robot robot = new Robot();	    			
			
			// return to custom game
			if (restartingGame) {
				Logger.print("ProxyBot", "Restarting Game");
	
				BufferedWriter writer = new BufferedWriter(new FileWriter("results.txt", true));
				writer.write("Game Ended(" + race1 + ", " + race2 + "): " + winCount + "/" + gameCount);
				writer.write("\n");
				writer.close();
				
				// return to custom game
	        	Thread.sleep(5000);
	        	robot.keyPress(KeyEvent.VK_ENTER);
	        	robot.keyRelease(KeyEvent.VK_ENTER);
	        	Thread.sleep(5000);
	        	robot.keyPress(KeyEvent.VK_ENTER);
	        	robot.keyRelease(KeyEvent.VK_ENTER);
	        	Thread.sleep(5000);
	
	        	// U sometimes isn't picked up
	        	// 350, 445
				robot.mouseMove(350, 445);
	        	Thread.sleep(100);
				robot.mousePress(InputEvent.BUTTON1_MASK);
	        	Thread.sleep(100);
				robot.mouseRelease(InputEvent.BUTTON1_MASK);
				
				// Time to switch maps
				if (gameCount%20 == 0) {
		        	Thread.sleep(5000);		        	
		        	robot.keyPress(KeyEvent.VK_DOWN);
		        	Thread.sleep(100);		        	
		        	robot.keyRelease(KeyEvent.VK_DOWN);
				}
			}
			
        	Thread.sleep(5000);		        	
        	System.out.println("Selecting races");
        	
        	// race select
        	int y1 = 367;
        	switch (race1) {
        	case Protoss:
        		y1 = 397;
        		break;
        	case Terran:
        		y1 = 382;
        		break;
        	case Zerg:
        		y1 = 367;
        		break;
        	}
        	
        	int y2 = 387;
        	switch (race2) {
        	case Protoss:
        		y2 = 422;
        		break;
        	case Terran:
        		y2 = 402;
        		break;
        	case Zerg:
        		y2 = 387;
        		break;
        	}
        	
        	// select race 1
			robot.mouseMove(250, 355);
        	Thread.sleep(1000);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(1000);
			robot.mouseMove(250, y1);
        	Thread.sleep(1000);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);

			// select race 2
			Thread.sleep(1000);
			robot.mouseMove(250, 375);
        	Thread.sleep(1000);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(1000);
			robot.mouseMove(250, y2);
        	Thread.sleep(1000);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);

			// close slots
			Thread.sleep(1000);
			robot.mouseMove(120, 395);
        	Thread.sleep(1000);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(1000);
			robot.mouseMove(120, 410);
        	Thread.sleep(1000);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
			Thread.sleep(1000);
			robot.mouseMove(120, 415);
        	Thread.sleep(1000);
			robot.mousePress(InputEvent.BUTTON1_MASK);
        	Thread.sleep(1000);
			robot.mouseMove(120, 430);
        	Thread.sleep(1000);
			robot.mouseRelease(InputEvent.BUTTON1_MASK);
			Thread.sleep(1000);
        	
        	// start the game
        	robot.keyPress(KeyEvent.VK_ENTER);
        	robot.keyRelease(KeyEvent.VK_ENTER);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}
