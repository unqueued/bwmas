package starcraftbot.proxybot.wmes.unit;

import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;

import starcraftbot.abl.StarCraftConstants;
import starcraftbot.abl.wmes.AllMineralsWME;
import starcraftbot.proxybot.bot.ABLStarCraftBot;
import wm.WME;
/**
 * Represents a bot-controlled unit.
 */
public class PlayerUnitWME extends UnitWME {
	
	public enum WorkerTask { IDLE, MINING, GAS, CONSTRUCTING, SCOUTING }
	
	private static HashMap<Integer, Integer> taskMap;
	
	private static HashMap<Integer, Integer> rallyMap;

	private static HashMap<Integer, Integer> squadronMap;

	private static HashSet<Integer> spawnedGoal;

	private static HashSet<Integer> hasTask;

	public static void init() {
		taskMap = new HashMap<Integer, Integer>();
		rallyMap = new HashMap<Integer, Integer>();
		squadronMap = new HashMap<Integer, Integer>();
		spawnedGoal = new HashSet<Integer>();
		hasTask = new HashSet<Integer>();
	}
	
	public int getTask() {
		Integer status = taskMap.get(ID);
		return (status != null) ? status : WorkerTask.IDLE.ordinal();
	}
	
	public void setTask(int status) {
		if (ID == StarCraftConstants.NULL_UNIT) {
			System.err.println("Attempt to set task before ID was initialized.");
			Thread.dumpStack();
		}
		
		taskMap.put(ID, status);
	}
	
	public void setRally() {
		Integer count = rallyMap.get(ID);
		if (count == null) count = 0;
		
		rallyMap.put(ID, count + 1);
	}
	
	/**
	 * Require the unit to set the rally point 3 times
	 */
	public boolean getRallySet() {
		Integer count = rallyMap.get(ID);
		return count != null && count > 2;
	}

	public int getSquadronID() {
		Integer squadronID = squadronMap.get(ID); 
		return squadronID != null ? squadronID : 0;
	}
	
	public void setSquadronID(int squadronID) {
		squadronMap.put(ID, squadronID);
	}
	
	public boolean getSpawnedGoal() {
		return spawnedGoal.contains(ID);
	}
	
	public void spawnedGoal() {
		spawnedGoal.add(ID);
	}
	
	public boolean getHasTask() {
		return hasTask.contains(ID);
	}
	
	public void hasTask() {
		hasTask.add(ID);
	}	
	
	public void clearTask() {
		hasTask.remove(ID);
	}

	@SuppressWarnings("unchecked")
	public int getMiningWorkers() {
		LinkedList<WME> wmes = ABLStarCraftBot.getBehavingEntity().lookupWME("AllMineralsWME");
		if (wmes.isEmpty()) {
			return 0;
		}
		AllMineralsWME minerals = (AllMineralsWME) wmes.get(0);
		return minerals.getNumWorkers(ID);
	}
}